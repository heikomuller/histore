# This file is part of the History Store (histore).
#
# Copyright (C) 2018-2021 New York University.
#
# The History Store (histore) is released under the Revised BSD License. See
# file LICENSE for full license details.

"""Functions for sorting CSV documents in main-memory or using secondary
storage. The functions in this module are inspired by csvsort
(https://github.com/richardpenman/csvsort).

For HISTORE we made a few modifications that allow us to handle CSV files that
can be sorted in main-memory directly instead of writing them to disk after
sorting.
"""

from tempfile import NamedTemporaryFile as TempFile
from typing import List, Optional, Tuple

import heapq
import os
import sys


from histore.document.base import DocumentIterator

import histore.config as config


def decorated_buffer(buffer, sortkey):
    """Iterator for in-memory buffer of data rows.

    Parameters
    ----------
    buffer: list
        Buffer of rows from the input file that were not written to file.
    sortkey: list
        List of index positions for sort columns.
    """
    buffer.sort(key=lambda row: keyvalue(row, sortkey))
    for row in buffer:
        yield keyvalue(row, sortkey), row


def decorated_file(filename, columns):
    """Iterator for sorted CSV file block. From
    https://github.com/richardpenman/csvsort/blob/master/__init__.py

    Parameters
    ----------
    filename: string
        Temporary CSV file (block) on disk.
    columns: list
        List of index positions for sort columns.
    """
    with open(filename, 'r', newline='') as f:
        for row in csv.reader(f):
            yield keyvalue(row, columns), row


def keyvalue(row, columns):
    """Get the sort key for a given row. From
    https://github.com/richardpenman/csvsort/blob/master/__init__.py

    Parameters
    ----------
    row: list
        List of cell values in a CSV file row.
    columns: list
        List of index positions for sort columns.

    Returns
    -------
    list
    """
    return [row[column] for column in columns]


def mergesort(buffer, filenames, sortkey):
    """2-way merge sort for blocks of a CSV file. Adopted from
    https://github.com/richardpenman/csvsort/blob/master/__init__.py

    Returns name of file contaiing the sorted output.

    Parameters
    ----------
    buffer: list
        Buffer of rows from the input file that were not written to file.
    filename: list
        List of names for sorted temporary files that were generated by the
        CSV split method.
    sortkey: list
        List of index positions for sort columns.

    Returns
    -------
    string
    """
    # Merge the buffer if it contains rows.
    if buffer:
        mergefile = filenames[0]
        with TempFile(delete=False, mode='w', newline='') as f_out:
            writer = factory.get_writer(f_out)
            files = [
                decorated_buffer(buffer, sortkey),
                decorated_file(mergefile, sortkey)
            ]
            for _, row in heapq.merge(*files):
                writer.writerow(row)
            filenames = filenames[1:] + [f_out.name]
        os.remove(mergefile)
    while len(filenames) > 1:
        mergefiles, filenames = filenames[:2], filenames[2:]
        with TempFile(delete=False, mode='w', newline='') as f_out:
            writer = factory.get_writer(f_out)
            files = [decorated_file(f, sortkey) for f in mergefiles]
            for _, row in heapq.merge(*files):
                writer.writerow(row)
            filenames.append(f_out.name)
        for filename in mergefiles:
            os.remove(filename)
    return filenames[0]


def split(
    reader: DocumentIterator, sortkey: List[int], buffer_size: Optional[float] = None
) -> Tuple[List, List[str]]:
    """Split a CSV file into blocks of maximum size. Individual blocks are
    written to temporary files on disk. Only the final buffer is maintained in
    memory. Returns the memory buffer and the list of names for temporary files
    that are created. Adopted from
    https://github.com/richardpenman/csvsort/blob/master/__init__.py

    Returns a tuple of: main-memory buffer for data rows, and list of names for
    temporary files.

    Parameters
    ----------
    reader: histore.document.base.DocumentIterator
        Iterator for rowid, cell values in an input document.
    sortkey: list
        List of index positions for sort columns.
    buffer_size: float, default=None
        Maximum size of CSV file blocks that are kept in main-memory. If no
        buffer size is given the value from the environment variable
        HISTORE_SORTBUFFER is used.

    Returns
    -------
    list(rows), list(filenames)
    """
    # Ensure that the buffer size is set.
    if buffer_size is None:
        buffer_size = config.SORTBUFFER()
    # Convert buffer size from MB to bytes.
    max_size = buffer_size * 1024 * 1024
    # Split CSV file rows into blocks
    buffer = list()
    current_size = 0
    tmp_filenames = list()
    for _, _, row in reader:
        buffer.append(row)
        current_size += sys.getsizeof(row)
        if current_size > max_size:
            # Sort buffer.
            buffer.sort(key=lambda row: keyvalue(row, sortkey))
            # Write buffer to disk.
            with TempFile(delete=False, mode='w', newline='') as f_out:
                writer = factory.get_writer(f_out)
                for r in buffer:
                    writer.write(r)
                writer.close()
                # Append file name to result file name list.
                tmp_filenames.append(f_out.name)
            # Clear buffer.
            buffer = list()
            current_size = 0
    return buffer, tmp_filenames
